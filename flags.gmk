# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Define variables for language and standard
language = c++
language_release = 20
standard = $(language)$(language_release)

# Define variables for character constants
comma = ,
empty =
space = $(empty) $(empty)

# Define function to quote (escape) shell metacharacters
shell-quote = $(subst $$,\$$,$1)

# Define functions to format assembler/linker flags for the compiler
format-as-flag = $(call format-flag,$(as_family),$1,$2)
format-ld-flag = $(call format-flag,$(ld_family),$1,$2)
format-flag = $(if $(strip $3),$(if $(filter gnu,$1),$2=$3,$2 $3),)
join-flags = $(if $(strip $2),$(subst $(space),$(comma),$1 $(strip $2)),)

# Define functions to compute assembler listing flag
get-listing-flag = $(call format-as-flag,-adghln,$1)

# Define functions to compute install_name and soname flags
get-install-name-flag = $(call format-ld-flag,-install_name,$1)
get-soname-flag = $(call format-ld-flag,-soname,$1)

# Define functions to compute rpath flag
get-rpath-flag = $(foreach rpath,$1,$(call	\
format-ld-flag,-rpath,$(rpath:/.=)))

# Define predicates for build types
is_debug_build = $(filter $(BUILD_TYPE),Debug)
is_release_build = $(filter $(BUILD_TYPE),Release)

# Define predicates for compiler and linker features
is_as_listings = $(filter $(as_features),listings)
is_ld_install_name = $(filter $(ld_features),install_name)
is_ld_rpath = $(filter $(ld_features),rpath)
is_ld_soname = $(filter $(ld_features),soname)

# Define predicates for feature options
with_listings = $(filter $(WITH_LISTINGS),true)
with_loadmaps = $(filter $(WITH_LOADMAPS),true)
using_libasan = $(filter $(USING_LIBASAN),true)
using_valgrind = $(filter $(USING_VALGRIND),true)

# Define predicates for object and shared object files
is_depend = $(filter %$(depend_suffix),$@)
is_object = $(filter %$(object_suffix),$@)
is_shared = $(filter %$(shared_suffix),$@)

# Define install_name and soname linker option variables
install_name = $(library_file)$(alias_suffix)
soname = $(library_file)$(alias_suffix)

# Define rpath linker option component variables
origin = $(if $(filter gnu,$(ld_family)),$$ORIGIN,)
rpaths = $(if $(origin),$(addprefix $(origin)/,. ../lib),)

# ARFLAGS
ARFLAGS = r

# CLANG_TIDY_FLAGS

CLANG_TIDY_FLAGS = -config-file='.clang-tidy' -header-filter='.*' --	\
$(if $(standard),-std=$(standard),) $(CPPFLAGS)

# CPPCHECK_FLAGS

CPPCHECK_FLAGS = --check-level=exhaustive				\
--checkers-report=cppcheck.log --cppcheck-build-dir=$(cppcheck_dir)	\
--enable=all --inline-suppr --quiet $(if				\
$(standard),--std=$(standard),) --suppress=missingIncludeSystem		\
$(filter-out -I$(SDKROOT)/usr/include,$(CPPFLAGS))

# CPPFLAGS

# Add OS macro flags to CPPFLAGS
cpp_symbols += OS_$(os_macro_kernel)
cpp_symbols += $(if $(is_darwin_source),_DARWIN_C_SOURCE,)
cpp_symbols += $(if $(is_gnu_source),_GNU_SOURCE,)
cpp_symbols += $(if $(is_windows_api),WIN32,)

# Add fortify source flag to CPPFLAGS
cpp_symbols += $(if $(is_release_build),_FORTIFY_SOURCE=2,)

# Add Glibc assertion flags to CPPFLAGS
cpp_symbols += _GLIBCXX_ASSERTIONS
cpp_symbols += $(if $(is_debug_build),_GLIBCXX_DEBUG,)

CPPFLAGS += $(addprefix -I,$(include_dirs))
CPPFLAGS += $(addprefix -D,$(sort $(cpp_symbols)))

# CXX_ASFLAGS

# Add assembler listing options to CXX_ASFLAGS
listing = $(@:$(object_suffix)=.lst)
asflags += $(if $(is_object),$(if $(with_listings),$(if		\
$(is_as_listings),$(if $(filter $(cxx_family),gnu),$(call	\
get-listing-flag,$(listing)),),),),)
CXX_ASFLAGS += $(call join-flags,-Wa,$(asflags))

# CXXFLAGS

# Add code coverage flag to CXXFLAGS
CXXFLAGS += $(if $(is_debug_build),--coverage,)

# Add position-independent code flag to CXXFLAGS
CXXFLAGS += -fPIC

# Add omit frame pointer flag to CXXFLAGS
CXXFLAGS += $(if $(is_debug_build),-fno-omit-frame-pointer,)

# Add address sanitizer flags to CXXFLAGS
CXXFLAGS += $(if $(is_debug_build),$(if		\
$(using_libasan),-fsanitize=address		\
-fsanitize-address-use-after-scope),)

# Add automatic variable initialization flag to CXXFLAGS
CXXFLAGS += -ftrivial-auto-var-init=zero

# Add debug format flag to CXXFLAGS
CXXFLAGS += $(if $(is_debug_build),$(if $(using_valgrind),-gdwarf-4,),)

# Add debug flag to CXXFLAGS
CXXFLAGS += $(if $(is_debug_build),$(if $(filter gnu,$(cxx_family)),-ggdb,-g3),)

# Add optimization flag to CXXFLAGS
CXXFLAGS += $(if $(is_debug_build),-O0,)
CXXFLAGS += $(if $(is_release_build),-O2,)

# Add pipe flag to CXXFLAGS
CXXFLAGS += $(if $(filter gnu,$(as_family)),-pipe,)

# Add language standard flag to CXXFLAGS
CXXFLAGS += $(if $(standard),-std=$(standard),)

# Add assembler option flags to CXXFLAGS
CXXFLAGS += $(CXX_ASFLAGS)

# Add warning flags to CXXFLAGS
CXXFLAGS += -Wall -Werror -Wextra -Wshadow -Wsign-conversion

# LDFLAGS

# Add code coverage flag to LDFLAGS
LDFLAGS += $(if $(is_debug_build),--coverage,)

# Add address sanitizer flags to LDFLAGS
LDFLAGS += $(if $(is_debug_build),$(if $(using_libasan),-fsanitize=address,),)

# Add -install_name linker option flag to LDFLAGS
ldflags += $(if $(is_shared),$(if $(is_ld_install_name),$(call	\
get-install-name-flag,$(install_name)),),)

# Add load map linker option flag to LDFLAGS
map = $(@:$(if $(is_shared),$(shared_suffix),$(binary_suffix))=.map)
map_opt = $(if $(filter gnu,$(ld_family)),-Map,-map)
ldflags += $(if $(with_loadmaps),$(call		\
format-ld-flag,$(map_opt),$(map)),)

# Add -rpath linker option flag to LDFLAGS
ldflags += $(if $(is_shared),,$(if $(is_ld_rpath),$(call	\
get-rpath-flag,$(call shell-quote,$(rpaths:/.=))),))

# Add -soname linker option flag to LDFLAGS
ldflags += $(if $(is_shared),$(if $(is_ld_soname),$(call	\
get-soname-flag,$(soname)),),)

# Add -shared option flag to LDFLAGS
LDFLAGS += $(call join-flags,-Wl,$(ldflags)) $(if $(is_shared),-shared,)

# LDLIBS

LDLIBS += $(if $(filter $(os_label_kernel),MINGW64_NT),-lws2_32,)

# Local Variables:
# mode: makefile
# End:
