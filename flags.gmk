# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Define variables for character constants
comma = ,
empty =
space = $(empty) $(empty)

# Define function to compare semantic version strings
compare-versions = $(shell $(script_dir)/compare-versions '$1' '$2')

# Define function to quote (escape) shell metacharacters
shell-quote = $(subst $$,\$$,$1)

# Define functions to format assembler/linker flags for the compiler
format-as-flag = $(call format-flag,$(as_family),$1,$2)
format-ld-flag = $(call format-flag,$(ld_family),$1,$2)
format-flag = $(if $(strip $3),$(if $(filter gnu,$1),$2=$3,$2 $3),)
join-flags = $(if $(strip $2),$(subst $(space),$(comma),$1 $(strip $2)),)

# Define functions to compute assembler listing flag
get-listing-flag = $(call format-as-flag,-adghln,$1)

# Define functions to compute install_name and soname flags
get-install-name-flag = $(call format-ld-flag,-install_name,$1)
get-soname-flag = $(call format-ld-flag,-soname,$1)

# Define functions to compute rpath flag
get-rpath-flag = $(foreach rpath,$1,$(call	\
format-ld-flag,-rpath,$(rpath:/.=)))

# Define predicates for command features
is_as_listings = $(filter $(as_features),listings)
is_ld_install_name = $(filter $(ld_features),install_name)
is_ld_rpath = $(filter $(ld_features),rpath)
is_ld_soname = $(filter $(ld_features),soname)

# Define predicates for feature sets
with_listings = $(filter $(WITH_LISTINGS),true)
with_loadmaps = $(filter $(WITH_LOADMAPS),true)
using_libasan = $(filter $(USING_LIBASAN),true)
using_valgrind = $(filter $(USING_VALGRIND),true)

# Define predicates for object and shared object files
is_depend = $(filter %$(depend_suffix),$@)
is_object = $(filter %$(object_suffix),$@)
is_shared = $(filter %$(shared_suffix),$@)

# Define install_name and soname linker option variables
install_name = $(library_file)$(alias_suffix)
soname = $(library_file)$(alias_suffix)

# Define rpath linker option component variables
origin = $(if $(filter gnu,$(ld_family)),$$ORIGIN,)
rpaths = $(if $(origin),$(addprefix $(origin)/,. ../lib),)

# ARFLAGS
ARFLAGS = r

# CLANG_TIDY_FLAGS

CLANG_TIDY_FLAGS = -config-file='.clang-tidy' -header-filter='.*' --	\
$(if $(standard),-std=$(standard),) $(CPPFLAGS)

# CPPCHECK_FLAGS

CPPCHECK_FLAGS = --check-level=exhaustive				\
--checkers-report=cppcheck.log --cppcheck-build-dir=$(cppcheck_dir)	\
--enable=all --inline-suppr --quiet $(if				\
$(standard),--std=$(standard),) --suppress=missingIncludeSystem		\
$(filter-out -I$(SDKROOT)/usr/include,$(CPPFLAGS))

# CPPFLAGS

ifeq "$(USING_DMALLOC)" "true"
	cpp_symbols += DMALLOC DMALLOC_FUNC_CHECK
endif

cpp_symbols += OS_$(os_macro_kernel)

ifeq "$(os_label_kernel)" "CYGWIN_NT"
	cpp_symbols += _GNU_SOURCE
else ifeq "$(os_label_kernel)" "Darwin"
	cpp_symbols += _DARWIN_C_SOURCE
else ifeq "$(os_label_kernel)" "MINGW64_NT"
	cpp_symbols += WIN32
endif

ifeq "$(BUILD_TYPE)" "Release"
	cpp_symbols += _FORTIFY_SOURCE=2
endif

cpp_symbols += _GLIBCXX_ASSERTIONS

ifeq "$(BUILD_TYPE)" "Debug"
	cpp_symbols += _GLIBCXX_DEBUG
endif

CPPFLAGS += $(addprefix -I,$(include_dirs))
CPPFLAGS += $(addprefix -D,$(sort $(cpp_symbols)))

# CXX_ASFLAGS

listing = $(@:$(object_suffix)=.lst)
asflags += $(if $(is_object),$(if $(with_listings),$(if		\
$(is_as_listings),$(if $(filter $(cxx_family),gnu),$(call	\
get-listing-flag,$(listing)),),),),)
CXX_ASFLAGS += $(call join-flags,-Wa,$(asflags))

# CXXFLAGS

ifeq "$(BUILD_TYPE)" "Debug"
	CXXFLAGS += --coverage
endif

CXXFLAGS += -fPIC

ifeq "$(BUILD_TYPE)" "Debug"
	CXXFLAGS += -fno-omit-frame-pointer
	CXXFLAGS += $(if $(using_libasan),-fsanitize=address	\
	-fsanitize-address-use-after-scope)
endif

CXXFLAGS += -ftrivial-auto-var-init=zero

ifeq "$(BUILD_TYPE)" "Debug"
	CXXFLAGS += $(if $(using_valgrind),-gdwarf-4,)
	CXXFLAGS += $(if $(filter gnu,$(cxx_family)),-ggdb,-g3) -O0
else ifeq "$(BUILD_TYPE)" "Release"
	CXXFLAGS += -O2
endif

CXXFLAGS += $(if $(filter gnu,$(as_family)),-pipe,)
CXXFLAGS += $(if $(standard),-std=$(standard),) $(CXX_ASFLAGS)
CXXFLAGS += -Wall -Werror -Wextra -Wshadow -Wsign-conversion

# LDFLAGS

ifeq "$(BUILD_TYPE)" "Debug"
	LDFLAGS += --coverage $(if $(using_libasan),-fsanitize=address,)
endif

ldflags += $(if $(is_shared),$(if $(is_ld_install_name),$(call	\
get-install-name-flag,$(install_name)),),)

map = $(@:$(if $(is_shared),$(shared_suffix),$(binary_suffix))=.map)
map_opt = $(if $(filter gnu,$(ld_family)),-Map,-map)
ldflags += $(if $(with_loadmaps),$(call		\
format-ld-flag,$(map_opt),$(map)),)

ldflags += $(if $(is_shared),,$(if $(is_ld_rpath),$(call	\
get-rpath-flag,$(call shell-quote,$(rpaths:/.=))),))

ldflags += $(if $(is_shared),$(if $(is_ld_soname),$(call	\
get-soname-flag,$(soname)),),)

LDFLAGS += $(call join-flags,-Wl,$(ldflags)) $(if $(is_shared),-shared,)

# LDLIBS

LDLIBS += $(if $(filter $(os_label_kernel),MINGW64_NT),-lws2_32,)

# Local Variables:
# mode: makefile
# End:
