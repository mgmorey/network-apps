# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Define constants
comma = ,
empty =
space = $(empty) $(empty)

# Define functions for formatting compiler options to the assembler and linker
compare-versions = $(shell $(script_dir)/compare-versions '$1' '$2')
format-as-option = $(call format-option,$(as_family),$1,$2)
format-ld-option = $(call format-option,$(ld_family),$1,$2)
format-option = $(if $(filter gnu,$1),$2=$3,$2 $3)
join-as-options = $(call join-options,-Wa $1)
join-ld-options = $(call join-options,-Wl $1)
join-options = $(subst $(space),$(comma),$1)

# Define predicates for object and shared object files
is_depend = $(filter %$(depend_suffix),$@)
is_object = $(filter $(object_dir)/%$(object_suffix),$@)
is_shared = $(filter $(output_dir)/$(library_prefix)%$(shared_suffix),$@)

# Define rpaths and soname linker option variables
rprefix = $(if $(filter,gnu,$(ld_family)),$$ORIGIN,@executable_path)
rpaths = $(addprefix $(rprefix)/,. ../lib)
soname = $(library_file)$(alias_suffix)

# ARFLAGS
ARFLAGS = r

# CLANG_TIDY_FLAGS

ifeq "$(cxx_family)" "clang"

ifeq "$(call compare-versions,$(clang_tidy_version),12)" "greater"
	CLANG_TIDY_FLAGS = -config-file='.clang-tidy'
else
	CLANG_TIDY_FLAGS = -config=
endif

CLANG_TIDY_FLAGS += -header-filter='.*'
CLANG_TIDY_FLAGS += --

ifdef standard
	CLANG_TIDY_FLAGS += -std=$(standard)
endif

CLANG_TIDY_FLAGS += $(CPPFLAGS)

endif

# CPPCHECK_FLAGS

CPPCHECK_FLAGS = --check-level=exhaustive
CPPCHECK_FLAGS += --checkers-report=cppcheck.log
CPPCHECK_FLAGS += --cppcheck-build-dir=$(cppcheck_dir)
CPPCHECK_FLAGS += --enable=all --inline-suppr --quiet

ifdef standard
	CPPCHECK_FLAGS += --std=$(standard)
endif

CPPCHECK_FLAGS += --suppress=missingIncludeSystem
CPPCHECK_FLAGS += $(filter-out -I$(SDKROOT)/usr/include,$(CPPFLAGS))

# CPPFLAGS

ifeq "$(USING_DMALLOC)" "true"
	cpp_symbols += DMALLOC DMALLOC_FUNC_CHECK
endif

cpp_symbols += OS_$(os_macro_name)

ifeq "$(os_id_name)" "Linux"
	cpp_symbols += OS_LINUX_$(os_macro_dist)
endif

ifeq "$(os_id_name)" "CYGWIN_NT"
	cpp_symbols += _GNU_SOURCE
else ifeq "$(os_id_name)" "Darwin"
	cpp_symbols += _DARWIN_C_SOURCE
else ifeq "$(os_id_name)" "MINGW64_NT"
	cpp_symbols += WIN32
endif

ifdef NDEBUG
	cpp_symbols += _FORTIFY_SOURCE=2
endif

cpp_symbols += _GLIBCXX_ASSERTIONS

ifndef NDEBUG
	cpp_symbols += _GLIBCXX_DEBUG
endif

CPPFLAGS += $(addprefix -I,$(include_dirs))
CPPFLAGS += $(addprefix -D,$(sort $(cpp_symbols)))

# CXX_ASFLAGS

ifeq "$(WITH_LISTINGS)" "true"
ifeq "$(cxx_family)" "gnu"
ifeq "$(as_family)" "gnu"
	listing = $(@:$(object_suffix)=.lst)
	asflags = $(call format-as-option,-adghln,$(listing))
	CXX_ASFLAGS += $(if $(is_object),$(call	\
	join-as-options,$(asflags)),)
endif
endif
endif

# CXXFLAGS

ifeq "$(as_family)" "gnu"
	CXXFLAGS += -pipe
endif

CXXFLAGS += -fPIC

ifndef NDEBUG
	CXXFLAGS += -fno-omit-frame-pointer
ifeq "$(USING_LIBASAN)" "true"
	CXXFLAGS += -fsanitize=address -fsanitize-address-use-after-scope
endif
endif

ifeq "$(cxx_family)" "clang"
ifeq "$(call compare-versions,$(cxx_version),15)" "greater"
	CXXFLAGS += -ftrivial-auto-var-init=zero
endif
else
ifeq "$(call compare-versions,$(cxx_version),12)" "greater"
	CXXFLAGS += -ftrivial-auto-var-init=zero
endif
endif

ifndef NDEBUG
ifeq "$(USING_VALGRIND)" "true"
	CXXFLAGS += -gdwarf-4
endif
ifeq "$(cxx_family)" "gnu"
	CXXFLAGS += -ggdb
else
	CXXFLAGS += -g3
endif
	CXXFLAGS += -O0
else
	CXXFLAGS += -O2
endif

ifdef standard
	CXXFLAGS += -std=$(standard)
endif

CXXFLAGS += $(CXX_ASFLAGS)
CXXFLAGS += -Wall -Werror -Wextra -Wshadow -Wsign-conversion

# LDFLAGS

ifndef NDEBUG
ifeq "$(USING_LIBASAN)" "true"
	LDFLAGS += -fsanitize=address
endif
endif

ifeq "$(WITH_LOAD_MAP)" "true"
	map = $(@:$(if $(is_shared),$(shared_suffix),$(binary_suffix))=.map)
	map_opt = $(if $(filter gnu,$(ld_family)),-Map,-map)
	ldflags += $(call format-ld-option,$(map_opt),$(map))
endif

name_opt = $(if $(filter gnu,$(ld_family)),-soname,-install_name)
ldflags += $(if $(is_shared),$(call				\
format-ld-option,$(name_opt),$(soname)),$(foreach		\
rpath,$(rpaths),$(call format-ld-option,-rpath,'$(rpath)')))

LDFLAGS += $(call join-ld-options,$(strip $(ldflags)))
LDFLAGS += $(if $(is_shared),-shared,)

# LDLIBS

LDLIBS += $(if $(filter MINGW64_NT,$(os_id_name)),-lws2_32,)

# Local Variables:
# mode: makefile
# End:
