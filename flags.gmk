# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Define functions for formatting compiler and linker options

format-option = $(if $(filter true,$1),$2=$3,$2 $3)
format-option-as = $(call format-option,$(is_gnu_as),$1,$2)
format-option-ld = $(call format-option,$(is_gnu_ld),$1,$2)
format-option-native = $(shell echo $(if $2,-W$1,) $2 | tr ' ' ',')

# ARFLAGS
ARFLAGS = r

# CLANG_TIDY_FLAGS

ifeq "$(call compare-versions,$(clang_tidy_version),12)" "greater"
	CLANG_TIDY_FLAGS = -config-file='.clang-tidy'
else
	CLANG_TIDY_FLAGS = -config=
endif

CLANG_TIDY_FLAGS += -header-filter='.*'
CLANG_TIDY_FLAGS += --

ifdef standard
	CLANG_TIDY_FLAGS += -std=$(standard)
endif

CLANG_TIDY_FLAGS += $(CPPFLAGS)

# CPPCHECK_FLAGS

CPPCHECK_FLAGS = --cppcheck-build-dir=$(cppbuild_dir)
CPPCHECK_FLAGS += --enable=all --inline-suppr --quiet
CPPCHECK_FLAGS += --suppress=missingIncludeSystem
CPPCHECK_FLAGS += --suppress=unusedFunction

ifdef standard
	CPPCHECK_FLAGS += --std=$(standard)
endif

CPPCHECK_FLAGS += $(filter-out -I$(SDKROOT)/usr/include,$(CPPFLAGS))

# CPPFLAGS

ifeq "$(USING_DMALLOC)" "true"
	cpp_symbols += DMALLOC DMALLOC_FUNC_CHECK
endif

cpp_symbols += OS_$(call to-macro,$(os_name))

ifeq "$(os_name)" "Linux"
	cpp_symbols += OS_LINUX_$(call to-macro,$(os_distro))
endif

ifeq "$(os_name)" "CYGWIN_NT"
	cpp_symbols += _GNU_SOURCE
else ifeq "$(os_name)" "Darwin"
	cpp_symbols += _DARWIN_C_SOURCE
else ifeq "$(os_name)" "MINGW64_NT"
	cpp_symbols += WIN32
endif

ifdef NDEBUG
	cpp_symbols += _FORTIFY_SOURCE=2
else ifeq "$(is_gcc)" "true"
	cpp_symbols += _GLIBCXX_DEBUG
endif

include_dirs = include
CPPFLAGS += $(addprefix -I,$(include_dirs))
CPPFLAGS += $(addprefix -D,$(sort $(cpp_symbols)))

# CXX_ASFLAGS

ifeq "$(WITH_LISTINGS)" "true"
ifeq "$(is_gcc)" "true"
ifeq "$(is_gnu_as)" "true"
	listing = $(subst .o,.lst,$@)
	ASFLAGS += $(call format-option-as,-adghln,$(listing))
	CXX_ASFLAGS += $(call format-option-native,a,$(ASFLAGS))
endif
endif
endif

# CXXFLAGS

CXXFLAGS += -fPIC

ifdef NDEBUG
ifeq "$(is_clang)" "true"
	CXXFLAGS += -flto
endif
	CXXFLAGS += -O2
else
	CXXFLAGS += -fno-omit-frame-pointer
ifeq "$(USING_LIBASAN)" "true"
	CXXFLAGS += -fsanitize=address -fsanitize-address-use-after-scope
endif
ifeq "$(USING_VALGRIND)" "true"
	CXXFLAGS += -gdwarf-4
endif
ifeq "$(is_gcc)" "true"
	CXXFLAGS += -ggdb
else
	CXXFLAGS += -g3
endif
	CXXFLAGS += -O0
endif

ifdef standard
	CXXFLAGS += -std=$(standard)
endif

CXXFLAGS += -Wall -Werror -Wextra -Wpedantic -Wshadow -Wsign-conversion
CXXFLAGS += $(CXX_ASFLAGS)

# LDFLAGS

ifdef NDEBUG
ifeq "$(is_clang)" "true"
	LDFLAGS += -flto
endif
else
ifeq "$(USING_LIBASAN)" "true"
	LDFLAGS += -fsanitize=address
endif
endif

ifdef WITH_LOAD_MAP_OPT
	load_map = $(call subst-suffix,.map,$@)
	ldflags += $(call format-option-ld,$(WITH_LOAD_MAP_OPT),$(load_map))
endif

ldflags_o = $(ldflags)
ldflags_so = $(ldflags)

ifneq "$(WITH_SHARED_OBJS)" "false"
ifeq "$(is_gnu_ld)" "true"
	ldflags_o += $(call format-option-ld,-rpath,'\$$ORIGIN')
	ldflags_so += $(call format-option-ld,-soname,$(call get-alias,$@))
endif
endif

lib_target = $(filter lib%,$@)

ldflags_native = $(if $(lib_target),$(ldflags_so),$(ldflags_o))
ldflags_target = $(if $(lib_target),-shared,)

LDFLAGS += $(call format-option-native,l,$(ldflags_native)) $(ldflags_target)

# LDLIBS

ifeq "$(USING_DMALLOC)" "true"
	LDLIBS += -ldmalloc
endif

ifeq "$(os_name)" "MINGW64_NT"
	LDLIBS += -lws2_32
endif

# Local Variables:
# mode: makefile
# End:
