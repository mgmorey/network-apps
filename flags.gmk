# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Compiler variables

clang_tidy_version = $(shell bin/get-llvm-version clang-tidy$(LLVM_SUFFIX))
is_clang = $(shell bin/is-clang $(CXX))
is_gcc = $(shell bin/is-gcc $(CXX))
is_gnu_as = $(shell bin/is-gnu-as $(AS))
is_gnu_ld = $(shell bin/is-gnu-ld $(LD))

# CPPFLAGS

ifeq "$(os_name)" "FreeBSD"
	CPPFLAGS += -I/usr/local/include
endif

CPPFLAGS += -Iinclude

CPPFLAGS += -DOS_$(shell echo $(os_name) | tr '[:lower:]' '[:upper:]')

ifdef NDEBUG
	CPPFLAGS += -D_FORTIFY_SOURCE=2
else ifeq "$(is_gcc)" "true"
	CPPFLAGS += -D_GLIBCXX_DEBUG
endif

ifeq "$(os_name)" "Darwin"
	CPPFLAGS += -D_DARWIN_C_SOURCE
else ifeq "$(os_name)" "CYGWIN_NT"
	CPPFLAGS += -D_POSIX_C_SOURCE=200809L
endif

ifeq "$(USING_DMALLOC)" "true"
	CPPFLAGS += -DDMALLOC -DMALLOC_FUNC_CHECK
endif

ifeq "$(os_name)" "Darwin"
	CPPFLAGS += -DHAVE_SOCKADDR_SA_LEN -DUSING_CUSTOM_ASSERT
else ifeq "$(os_name)" "FreeBSD"
	CPPFLAGS += -DHAVE_SOCKADDR_SA_LEN -DUSING_CUSTOM_ASSERT
endif

# CXX_ASFLAGS

ifeq "$(is_gcc)" "true"
ifeq "$(is_gnu_as)" "true"
	ASFLAGS += -adghln=$(subst .o,.lst,$@)
        CXX_ASFLAGS += $(shell echo -Wa $(ASFLAGS) | sed 's/ /,/g')
endif
endif

# CXX_LDFLAGS

ifneq "$(os_name)" "FreeBSD"
ifneq "$(is_gcc)" "true"
	LDFLAGS += -map $(subst .so,,$@).map
else ifneq "$(is_gnu_ld)" "true"
	LDFLAGS += -map $(subst .so,,$@).map
else
	LDFLAGS += -Map=$(subst .so,,$@).map
endif
endif

ifneq "$(is_gcc)" "true"
	LDFLAGS += -rpath '\$$ORIGIN'
else ifneq "$(is_gnu_ld)" "true"
	LDFLAGS += -rpath '\$$ORIGIN'
else
	LDFLAGS += -rpath='\$$ORIGIN'
endif

ifndef NDEBUG
ifeq "$(USING_LIBASAN)" "true"
	CXX_LDFLAGS += -fsanitize=address
endif
endif

CXX_LDFLAGS += $(shell echo -Wl $(LDFLAGS) | sed 's/ /,/g')

# CXXFLAGS

CXXFLAGS += -fPIC

ifndef NDEBUG
	CXXFLAGS += -fno-omit-frame-pointer
ifeq "$(USING_LIBASAN)" "true"
	CXXFLAGS += -fsanitize=address -fsanitize-address-use-after-scope
endif
ifeq "$(is_gcc)" "true"
	CXXFLAGS += -ggdb
else
	CXXFLAGS += -g3
endif
	CXXFLAGS += -O0
else
	CXXFLAGS += -O2
endif

ifdef standard
	CXXFLAGS += -std=$(standard)
endif

CXXFLAGS += -Wall -Werror -Wextra -Wpedantic -Wshadow $(CXX_ASFLAGS)

# LDLIBS

ifeq "$(os_name)" "FreeBSD"
	LDLIBS += -L/usr/local/lib
endif

ifeq "$(USING_DMALLOC)" "true"
	LDLIBS += -ldmalloc
endif

ifeq "$(os_name)" "MINGW64_NT"
	LDLIBS += -lws2_32
endif

# CPPCHECK_FLAGS

CPPCHECK_FLAGS = --cppcheck-build-dir=tmp --enable=all --inline-suppr --quiet

ifdef standard
	CPPCHECK_FLAGS += --std=$(standard)
endif

ifeq "$(os_name)" "MINGW64_NT"
	CPPCHECK_FLAGS += -D_WIN32
endif

ifeq "$(shell bin/compare-versions $(clang_tidy_version) 13)" "less"
	TIDY_CONFIG_FLAGS = -config=
else
	TIDY_CONFIG_FLAGS = -config-file='.clang-tidy'
endif

# TIDY_FLAGS

TIDY_CONFIG_FLAGS += -header-filter='.*'

ifdef standard
	TIDY_CPPFLAGS += -std=$(standard)
endif

TIDY_CPPFLAGS += $(CPPFLAGS)

TIDY_FLAGS = $(TIDY_CONFIG_FLAGS) -- $(TIDY_CPPFLAGS)

# Local Variables:
# mode: makefile
# End:
