# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Define functions for formatting compiler options to the assembler and linker
format-gcc-option-as = $(call format-gcc-option,as,$1)
format-gcc-option-ld = $(call format-gcc-option,ld,$1)
format-gcc-option = $(shell $(script_dir)/format-gcc-option $1 $2)
format-option-as = $(call format-option,$(as_family),$1,$2)
format-option-ld = $(call format-option,$(ld_family),$1,$2)
format-option = $(if $(filter gnu,$1),$2=$3,$2 $3)

# Define predicates for object and shared object files
is_object = $(filter %$(object_suffix),$@)
is_shared = $(filter $(library_prerfix)%.so.$(version),$@)

# ARFLAGS
ARFLAGS = r

# CLANG_TIDY_FLAGS

ifeq "$(call compare-versions,$(clang_tidy_version),12)" "greater"
	CLANG_TIDY_FLAGS = -config-file='.clang-tidy'
else
	CLANG_TIDY_FLAGS = -config=
endif

CLANG_TIDY_FLAGS += -header-filter='.*'
CLANG_TIDY_FLAGS += --

ifdef standard
	CLANG_TIDY_FLAGS += -std=$(standard)
endif

CLANG_TIDY_FLAGS += $(CPPFLAGS)

# CPPCHECK_FLAGS

CPPCHECK_FLAGS = --check-level=exhaustive
CPPCHECK_FLAGS += --checkers-report=cppcheck.log
CPPCHECK_FLAGS += --cppcheck-build-dir=$(cppbuild_dir)
CPPCHECK_FLAGS += --enable=all --inline-suppr --quiet

ifdef standard
	CPPCHECK_FLAGS += --std=$(standard)
endif

CPPCHECK_FLAGS += --suppress=missingIncludeSystem
CPPCHECK_FLAGS += $(filter-out -I$(SDKROOT)/usr/include,$(CPPFLAGS))

# CPPFLAGS

ifeq "$(USING_DMALLOC)" "true"
	cpp_symbols += DMALLOC DMALLOC_FUNC_CHECK
endif

cpp_symbols += OS_$(os_name_macro)

ifeq "$(os_name)" "Linux"
	cpp_symbols += OS_LINUX_$(os_dist_macro)
endif

ifeq "$(os_name)" "CYGWIN_NT"
	cpp_symbols += _GNU_SOURCE
else ifeq "$(os_name)" "Darwin"
	cpp_symbols += _DARWIN_C_SOURCE
else ifeq "$(os_name)" "MINGW64_NT"
	cpp_symbols += WIN32
endif

ifdef NDEBUG
	cpp_symbols += _FORTIFY_SOURCE=2
endif

cpp_symbols += _GLIBCXX_ASSERTIONS

ifndef NDEBUG
	cpp_symbols += _GLIBCXX_DEBUG
endif

include_dirs = include/$(platform) include
CPPFLAGS += $(addprefix -I,$(include_dirs))
CPPFLAGS += $(addprefix -D,$(sort $(cpp_symbols)))

# CXX_ASFLAGS

ifeq "$(WITH_LISTINGS)" "true"
ifeq "$(cxx_family)" "gnu"
ifeq "$(as_family)" "gnu"
	listing = $(@:$(object_suffix)=.lst)
	asflags = $(call format-option-as,-adghln,$(listing))
	CXX_ASFLAGS += $(if $(is_object),$(call	\
	format-gcc-option-as,$(asflags)),)
endif
endif
endif

# CXXFLAGS

ifeq "$(as_family)" "gnu"
	CXXFLAGS += -pipe
endif

CXXFLAGS += -fPIC

ifndef NDEBUG
	CXXFLAGS += -fno-omit-frame-pointer
ifeq "$(USING_LIBASAN)" "true"
	CXXFLAGS += -fsanitize=address -fsanitize-address-use-after-scope
endif
endif

ifeq "$(cxx_family)" "clang"
ifeq "$(call compare-versions,$(cxx_version),15)" "greater"
	CXXFLAGS += -ftrivial-auto-var-init=zero
endif
else
ifeq "$(call compare-versions,$(cxx_version),12)" "greater"
	CXXFLAGS += -ftrivial-auto-var-init=zero
endif
endif

ifndef NDEBUG
ifeq "$(USING_VALGRIND)" "true"
	CXXFLAGS += -gdwarf-4
endif
ifeq "$(cxx_family)" "gnu"
	CXXFLAGS += -ggdb
else
	CXXFLAGS += -g3
endif
endif

ifdef NDEBUG
	CXXFLAGS += -O2
else
	CXXFLAGS += -O0
endif

ifdef standard
	CXXFLAGS += -std=$(standard)
endif

CXXFLAGS += $(CXX_ASFLAGS)
CXXFLAGS += -Wall -Werror -Wextra -Wshadow -Wsign-conversion

# LDFLAGS

ifndef NDEBUG
ifeq "$(USING_LIBASAN)" "true"
	LDFLAGS += -fsanitize=address
endif
endif

ifdef WITH_LOAD_MAP_OPT
	ldflags += $(if $(target_is_object),,$(call		\
	format-option-ld,$(WITH_LOAD_MAP_OPT),$(@).map))
endif

ifneq "$(WITH_SHARED_OBJS)" "false"
ifeq "$(ld_family)" "gnu"
	ldflags += $(if $(is_shared),$(call				\
	format-option-ld,-soname,$(@:.$(minor).$(micro)=)),$(call	\
	format-option-ld,-rpath,'$$ORIGIN'))
endif
endif

LDFLAGS += $(if $(is_object),,$(call format-gcc-option-ld,$(ldflags)))
LDFLAGS += $(if $(is_shared),-shared,)

# LDLIBS

ifeq "$(USING_DMALLOC)" "true"
	LDLIBS += -ldmalloc
endif

ifeq "$(os_name)" "MINGW64_NT"
	LDLIBS += -lws2_32
endif

# Local Variables:
# mode: makefile
# End:
