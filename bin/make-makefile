#!/bin/sh -eu

SED='s|\\(%s\\)\\.o[ :]*|%s\\1.o %s: \\\\\\
|
s/^[ ]*//'

parse_arguments() {
    command=
    dir=
    files=
    output=
    suffix=

    while getopts c:d:f:o:s:h opt; do
	case $opt in
	    (c)
		command="$OPTARG"
		;;
	    (d)
		parse_dir
		;;
	    (f)
		files="$OPTARG"
		;;
	    (o)
		parse_output
		;;
	    (s)
		parse_suffix
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 1 ]; then
	usage_error '%s: Too many arguments\n' "$script"
	exit 2
    elif [ $# -lt 1 ]; then
	if [ -z "$output" ]; then
	    usage_error '%s: Not enough arguments\n' "$script"
	    exit 2
	else
	    dir="$(dirname "$output" | sed 's|^\./||')"
	    stem="$(basename "$output" | cut -d. -f 1)"
	fi
    else
	stem="$1"
    fi

    output="${output:-${dir:+$dir/}$stem${suffix:-.d}}"
    files="$output${files:+ $files}"
}

parse_dir() {
    if [ ! -d "$OPTARG" ]; then
	usage_error '%s: "%s": No such directory\n' \
		    "$script" "$OPTARG"
	exit 2
    elif [ -n "$output" ]; then
	usage_error '%s: Argument "-d %s" conflicts with argument "-o %s"\n' \
		    "$script" "$OPTARG" "$output"
	exit 2
    else
	dir="$OPTARG"
    fi
}

parse_output() {
    if [ ! -d "$(dirname "$OPTARG")" ]; then
	usage_error '%s: "%s": No such directory\n' \
		    "$script" "$(dirname $OPTARG)"
	exit 2
    elif [ -n "$dir" ]; then
	usage_error '%s: Argument "-o %s" conflicts with argument "-d %s"\n' \
		    "$script" "$OPTARG" "$dir"
	exit 2
    elif [ -n "$suffix" ]; then
	usage_error '%s: Argument "-o %s" conflicts with argument "-s %s"\n' \
		    "$script" "$OPTARG" "$suffix"
	exit 2
    else
	output="$OPTARG"
    fi
}

parse_suffix() {
    if [ -n "$output" ]; then
	usage_error '%s: Argument "-s %s" conflicts with argument "-o %s"\n' \
		    "$script" "$OPTARG" "$output"
	exit 2
    else
	suffix="$OPTARG"
    fi
}

sed_makefile() {
    sed "$(printf "$SED\n" "$stem" "${dir:+$dir/}" "$files")"
}

usage() {
    cat <<EOF >&2
Usage: $script [-c COMMAND] [-d DIR] [-f FILE [FILE [...]]] [-s SUFFIX] STEM
       $script [-c COMMAND] [-f FILE [FILE [...]]] [-o OUTPUT]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script="$(basename "$0")"

parse_arguments "$@"

exec >"$output"

if [ -n "$command" ]; then
    $command | sed_makefile
else
    sed_makefile
fi
